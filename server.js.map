{"version":3,"sources":["../server.js"],"names":["app","server","http","createServer","use","express","static","download","url","method","responseType","then","r","data","isNumeric","isNaN","parseFloat","n","isFinite","transform","blur","height","width","quality","toFormat","sharpObj","Number","isInteger","resize","Math","min","max","jpeg","sharp","get","req","res","query","h","w","q","e","f","undefined","setHeader","type","set","pipe","parseInt","catch","status","send","listen","process","env","PORT","console","log","address","port"],"mappings":"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","file":"server.js","sourcesContent":["import http from 'http';\nimport express from 'express';\nimport morgan from 'morgan';\nimport axios from 'axios';\nimport sharp from 'sharp';\nimport etag from 'etag';\n\nlet app = express();\napp.server = http.createServer(app);\napp.use(morgan('dev'));\napp.use(express.static('files'));\nconst download = url => axios({\n  url,\n  method: 'get',\n  responseType: 'stream'\n}).then(r => r.data);\nconst isNumeric = n => !isNaN(parseFloat(n)) && isFinite(n);\nconst transform = ({\n  blur,\n  height,\n  width,\n  quality,\n  toFormat\n}) => {\n  const sharpObj = sharp();\n  if (Number.isInteger(height) && Number.isInteger(width)) {\n    sharpObj.resize(width, height)\n  } else\n  if (isNumeric(width)) {\n    sharpObj.resize(width);\n  } else\n  if (isNumeric(height)){\n    sharpObj.resize(null, height)\n  }\n  if (isNumeric(blur)) {\n    sharpObj.blur(Math.min(1000, Math.max(blur, 0.3)))\n  }\n  sharpObj.jpeg({\n    quality: isNumeric(quality) ? Math.max(1, Math.min(100, quality)) : 65,\n  })\n  if (sharp.toFormat) {\n    sharpObj.toFormat(toFormat)\n  }\n  return sharpObj\n}\napp.get('/example.png')\napp.get('/*', (req, res) => {\n\tconst { blur, h, w, q, e } = req.query;\n  let url = 'http://localhost:8808/example.png';\n  if(req.query.f != undefined) {\n    url = req.query.f\n  }\n  res.setHeader('ETag', etag(req.url))\n  res.type(e || 'webp');\n  res.set('Cache-Control', 'public, max-age=691200')\n  download(url)\n    .then((r) => \n      r.pipe(transform({\n        blur: parseInt(blur, 10),\n        height: parseInt(h, 10),\n        width: parseInt(w, 10),\n        quality: q && parseInt(q, 10),\n        toFormat: e\n      }))\n      .pipe(res)\n    )\n    .catch(() => {\n      res.status(404).send();\n    });\n});\napp.server.listen(process.env.PORT || 8808, '0.0.0.0', () => {\n\tconsole.log(`Started on port ${app.server.address().port}`);\n});\nexport default app;\n"]}